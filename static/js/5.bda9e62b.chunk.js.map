{"version":3,"sources":["pages/AnimeCharacterPage/anime-character-api.service.ts","components/Card.tsx","components/FlexBox.tsx","pages/AnimeCharacterPage/components/CharacterDescription.tsx","pages/AnimeCharacterPage/components/CharacterImage.tsx","pages/AnimeCharacterPage/components/CharacterDateOfBirth.tsx","pages/AnimeCharacterPage/components/CharacterInfoTable.tsx","pages/AnimeCharacterPage/AnimeCharacterPage.tsx","pages/AnimeCharacterPage/index.tsx"],"names":["AnimeCharacterAPI","graphqlService","animeId","this","useQuery","query","variables","id","Card","styled","div","FlexRow","CharacterDescription","description","data-testid","CharacterImage","characterName","fullCharacterName","characterImageURL","src","alt","CharacterDateOfBirth","year","month","day","format","Intl","DateTimeFormat","Date","LeftAlignedTable","table","CharacterInfoTable","Character","name","full","age","dateOfBirth","bloodType","AnimeCharacterPage","apiService","deps","React","useState","pageNumber","setPageNumber","getCharacterInfo","fetching","data","error","style","margin","maxWidth","padding","justifyContent","image","large","type","disabled","onClick","val","AnimeCharacterPageWithDeps","withProviders","providers","provide","useFactory","gqlService","GRAPHQL_API","withInjector"],"mappings":"kMAkCaA,EAAb,WACE,WAAoBC,GAA4C,yBAA5CA,iBADtB,oDAGE,SAAwBC,GACtB,OAAOC,KAAKF,eAAeG,SAAS,CAClCC,MAnCqB,+TAoCrBC,UAAW,CAAEC,GAAIL,SANvB,K,wBChCaM,EAAOC,IAAOC,IAAV,2JCAJC,EAAUF,IAAOC,IAAV,sFCKPE,EAAuB,SAAC,GAEH,IADhCC,EAC+B,EAD/BA,YAEA,OACE,yBAAKC,cAAY,wBAAwBD,ICJhCE,EAAiB,SAAC,GAGH,IAFPC,EAEM,EAFzBC,kBACAC,EACyB,EADzBA,kBAEA,OACE,yBACEJ,cAAY,iBACZK,IAAKD,EACLE,IAAG,UAAKJ,MCNDK,EAAuB,SAAC,GAKH,IAJhCC,EAI+B,EAJ/BA,KACAC,EAG+B,EAH/BA,MACAC,EAE+B,EAF/BA,IAE+B,IAD/BC,cAC+B,MADtB,QACsB,EAC/B,OACE,0BAAMX,cAAY,wBACfY,KAAKC,eAAeF,GAAQA,OAAO,IAAIG,KAAKN,EAAMC,EAAOC,MCb1DK,EAAmBpB,IAAOqB,MAAV,kEASTC,EAAqB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,UACnC,OACE,kBAACH,EAAD,CAAkBf,cAAY,iBAC5B,+BACE,4BACE,yCACA,4BAAKkB,EAAUC,KAAKC,OAEtB,4BACE,mCACA,4BAAKF,EAAUG,MAEjB,4BACE,6CACA,4BACE,kBAAC,EACKH,EAAUI,eAIpB,4BACE,0CACA,4BAAKJ,EAAUK,WAAa,UC1BhCC,EAAqB,SAAC,GAAiC,IAAxBC,EAAuB,cAA9BC,KAA8B,MAC1D,EAAoCC,IAAMC,SAAS,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAoCL,EAAWM,iBAAiBF,GAAhE,sBAASG,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,KAEnB,OAFA,EAAyBC,MAGhB,uCAGLF,EACK,2CAGLC,EAEA,yBAAKE,MAAO,CAAEC,OAAQ,OAAQC,SAAU,QAASC,QAAS,SACxD,kBAAC5C,EAAD,KACE,kBAACG,EAAD,CAASsC,MAAO,CAAEI,eAAgB,iBAChC,kBAAC,EAAD,CACEpC,kBAAmB8B,EAAKf,UAAUC,KAAKC,KACvChB,kBAAmB6B,EAAKf,UAAUsB,MAAMC,QAE1C,kBAAC,EAAD,CAAoBvB,UAAWe,EAAKf,aAEtC,kBAAC,EAAD,CAAsBnB,YAAakC,EAAKf,UAAUnB,eAEpD,kBAACF,EAAD,CACEsC,MAAO,CAAEI,eAAgB,gBAAiBD,QAAS,kBAEnD,4BACEI,KAAK,SACL1C,cAAY,0BACZ2C,SAAyB,IAAfd,EACVe,QAAS,kBAAMd,GAAc,SAACe,GAAD,OAAkB,IAARA,EAAY,EAAIA,EAAM,OAJ/D,YAQA,4BAAQH,KAAK,SAAS1C,cAAY,sBAAsB4C,QAAS,kBAAMd,GAAc,SAACe,GAAD,OAASA,EAAM,OAApG,UAQD,MAGIC,EAA6BC,YACxC,kBAAC,EAAD,MACA,CP3B+C,eQpB3CC,EAAwB,CAC5B,CACEC,QRkB6C,aQjB7CC,WAAY,SAACC,GACX,OAAO,IAAIjE,EAAkBiE,IAE/BzB,KAAM,CAAC0B,OAYIC,sBAAa,kBAACP,EAAD,MAAgCE","file":"static/js/5.bda9e62b.chunk.js","sourcesContent":["import { UseQueryResponse } from 'urql'\r\nimport { UrqlGraphQLService } from '../../services/urql-graphql-client.service'\r\nimport { IAnimeCharacterAPI } from './anime-character-api.interface'\r\n\r\nvar animeCharacterInfoQuery = `\r\nquery ($id: Int) {\r\n  Character(id: $id){\r\n    id\r\n    description\r\n    age\r\n    dateOfBirth {\r\n      year\r\n      month\r\n      day\r\n    }\r\n    image {\r\n      medium\r\n      large\r\n    }\r\n    name {\r\n      first\r\n      middle\r\n      last\r\n      full\r\n      native\r\n      userPreferred\r\n    }\r\n    bloodType\r\n  }\r\n}\r\n`\r\n\r\nexport const ANIME_CHARACTER_API_TOKEN: string = 'APIService'\r\n\r\nexport class AnimeCharacterAPI implements IAnimeCharacterAPI {\r\n  constructor(private graphqlService: typeof UrqlGraphQLService) {}\r\n\r\n  public getCharacterInfo(animeId: number): UseQueryResponse<any, {id: number}> {\r\n    return this.graphqlService.useQuery({\r\n      query: animeCharacterInfoQuery,\r\n      variables: { id: animeId }\r\n    })\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Card = styled.div`\r\n  & {\r\n    margin: 8px;\r\n    padding: 32px;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 12px 1px rgba(0, 0, 0, 0.66);\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const FlexRow = styled.div`\r\n  & {\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n`\r\n","import React from 'react'\r\n// import ReactMarkdown from 'react-markdown'\r\n\r\nexport type CharacterDescriptionProps = {\r\n  description: string\r\n}\r\n\r\nexport const CharacterDescription = ({\r\n  description\r\n}: CharacterDescriptionProps) => {\r\n  return (\r\n    <div data-testid=\"characterDescription\">{description}</div>\r\n    // <ReactMarkdown data-testid='characterDescription'>\r\n    //   {description}\r\n    // </ReactMarkdown>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport type CharacterImageProps = {\r\n  fullCharacterName: string\r\n  characterImageURL: string\r\n}\r\n\r\nexport const CharacterImage = ({\r\n  fullCharacterName: characterName,\r\n  characterImageURL\r\n}: CharacterImageProps) => {\r\n  return (\r\n    <img\r\n      data-testid='characterImage'\r\n      src={characterImageURL}\r\n      alt={`${characterName}`}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport type CharacterDateOfBirthProps = {\r\n  year: number\r\n  month: number\r\n  day: number\r\n  format: string\r\n}\r\n\r\nexport const CharacterDateOfBirth = ({\r\n  year,\r\n  month,\r\n  day,\r\n  format = 'en-us'\r\n}: CharacterDateOfBirthProps) => {\r\n  return (\r\n    <span data-testid='characterDateOfBirth'>\r\n      {Intl.DateTimeFormat(format).format(new Date(year, month, day))}\r\n    </span>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { CharacterDateOfBirth } from './CharacterDateOfBirth'\r\n\r\nconst LeftAlignedTable = styled.table`\r\n  text-align: left;\r\n  width: 256px;\r\n`\r\n\r\nexport type CharacterInfoTableProps = {\r\n  Character: any\r\n}\r\n\r\nexport const CharacterInfoTable = ({ Character }: CharacterInfoTableProps) => {\r\n  return (\r\n    <LeftAlignedTable data-testid='characterInfo'>\r\n      <tbody>\r\n        <tr>\r\n          <th>Full Name</th>\r\n          <td>{Character.name.full}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Age</th>\r\n          <td>{Character.age}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Date Of Birth</th>\r\n          <td>\r\n            <CharacterDateOfBirth\r\n              {...Character.dateOfBirth}\r\n            ></CharacterDateOfBirth>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>Blood Type</th>\r\n          <td>{Character.bloodType || 'NA'}</td>\r\n        </tr>\r\n      </tbody>\r\n    </LeftAlignedTable>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { withProviders } from '@doughtnerd/wrangler-di'\r\nimport { Card } from '../../components/Card'\r\nimport { FlexRow } from '../../components/FlexBox'\r\nimport { ANIME_CHARACTER_API_TOKEN } from './anime-character-api.service'\r\nimport { CharacterDescription } from './components/CharacterDescription'\r\nimport { CharacterImage } from './components/CharacterImage'\r\nimport { CharacterInfoTable } from './components/CharacterInfoTable'\r\n\r\nconst AnimeCharacterPage = ({ deps: [apiService] }: any) => {\r\n  const [pageNumber, setPageNumber] = React.useState(1)\r\n\r\n  const [{ fetching, data, error }] = apiService.getCharacterInfo(pageNumber)\r\n\r\n  if (error) {\r\n    return <div>Error!</div>\r\n  }\r\n\r\n  if (fetching) {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  if (data) {\r\n    return (\r\n      <div style={{ margin: 'auto', maxWidth: '800px', padding: '64px' }}>\r\n        <Card>\r\n          <FlexRow style={{ justifyContent: 'space-around' }}>\r\n            <CharacterImage\r\n              fullCharacterName={data.Character.name.full}\r\n              characterImageURL={data.Character.image.large}\r\n            />\r\n            <CharacterInfoTable Character={data.Character} />\r\n          </FlexRow>\r\n          <CharacterDescription description={data.Character.description} />\r\n        </Card>\r\n        <FlexRow\r\n          style={{ justifyContent: 'space-between', padding: '0 16px 0 16px' }}\r\n        >\r\n          <button\r\n            type='button'\r\n            data-testid=\"previousCharacterButton\"\r\n            disabled={pageNumber === 1}\r\n            onClick={() => setPageNumber((val) => (val === 1 ? 1 : val - 1))}\r\n          >\r\n            Previous\r\n          </button>\r\n          <button type='button' data-testid=\"nextCharacterButton\" onClick={() => setPageNumber((val) => val + 1)}>\r\n            Next\r\n          </button>\r\n        </FlexRow>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const AnimeCharacterPageWithDeps = withProviders(\r\n  <AnimeCharacterPage />,\r\n  [ANIME_CHARACTER_API_TOKEN]\r\n)\r\n","import React from 'react'\r\nimport { withInjector, Provider } from '@doughtnerd/wrangler-di'\r\nimport {\r\n  GRAPHQL_API,\r\n  UrqlGraphQLService\r\n} from '../../services/urql-graphql-client.service'\r\nimport {\r\n  AnimeCharacterAPI,\r\n  ANIME_CHARACTER_API_TOKEN\r\n} from './anime-character-api.service'\r\nimport { AnimeCharacterPageWithDeps } from './AnimeCharacterPage'\r\n\r\nconst providers: Provider[] = [\r\n  {\r\n    provide: ANIME_CHARACTER_API_TOKEN,\r\n    useFactory: (gqlService: typeof UrqlGraphQLService) => {\r\n      return new AnimeCharacterAPI(gqlService)\r\n    },\r\n    deps: [GRAPHQL_API]\r\n  }\r\n]\r\n\r\n\r\n/** \r\n * Personal opinion is this file doesn't need testing for two reasons:\r\n * 1. We assume the library itself has appropriately handled it's testing (perhaps a dangerous assumption but it does simplify testing needs)\r\n * 2. We make sure to fully test AnimeCharacterPageWithDeps and each provider\r\n * \r\n * With each portion of the code used here independently tested, testing this file is redundant/not valueable\r\n * */\r\nexport default withInjector(<AnimeCharacterPageWithDeps />, providers)\r\n"],"sourceRoot":""}