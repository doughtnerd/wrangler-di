{"version":3,"sources":["pages/AnimeCharacterPage/services/anime-character-api.service.ts","components/FlexBox.tsx","components/IndeterminateLoader.tsx","components/Card.tsx","pages/AnimeCharacterPage/components/CharacterDescription.tsx","pages/AnimeCharacterPage/components/CharacterImage.tsx","pages/AnimeCharacterPage/components/CharacterDateOfBirth.tsx","pages/AnimeCharacterPage/components/CharacterInfoTable.tsx","pages/AnimeCharacterPage/components/CharacterCard.tsx","pages/AnimeCharacterPage/AnimeCharacterPage.tsx","pages/AnimeCharacterPage/index.tsx"],"names":["ANIME_CHARACTER_API_TOKEN","AnimeCharacterAPI","graphqlService","characterId","this","useQuery","query","variables","id","FlexRow","styled","div","IndeterminateLoader","Card","CharacterDescription","description","CharacterImage","characterName","fullCharacterName","characterImageURL","height","width","src","alt","CharacterDateOfBirth","year","month","day","format","Intl","DateTimeFormat","Date","LeftAlignedTable","table","CharacterInfoTable","Character","name","full","age","dateOfBirth","bloodType","CharacterCard","style","justifyContent","image","large","maxHeight","overflowY","AnimeCharacterPageWithDeps","withProviders","apiService","deps","React","useState","pageNumber","setPageNumber","getCharacterInfo","fetching","data","error","margin","maxWidth","padding","type","disabled","onClick","val","providers","provide","useFactory","gqlService","GRAPHQL_API","withInjector"],"mappings":"kLAyBaA,EAAoC,aAEpCC,EAAb,WACE,WAAoBC,GAA4C,yBAA5CA,iBADtB,oDAGE,SAAwBC,GACtB,OAAOC,KAAKF,eAAeG,SAAS,CAClCC,MA5BqB,+NA6BrBC,UAAW,CAAEC,GAAIL,SANvB,K,wCCzBaM,EAAUC,IAAOC,IAAV,sF,QCAPC,EAAsB,WAC/B,OAAO,qBAAK,cAAY,gCAAjB,yBCDEC,EAAOH,IAAOC,IAAV,2J,QCKJG,EAAuB,SAAC,GAEH,IADhCC,EAC+B,EAD/BA,YAEA,OACE,cAAC,IAAD,CAAe,cAAY,uBAA3B,SACGA,KCLMC,EAAiB,SAAC,GAGH,IAFPC,EAEM,EAFzBC,kBACAC,EACyB,EADzBA,kBAEA,OACE,qBACEC,OAAO,QACPC,MAAM,QACN,cAAY,iBACZC,IAAKH,EACLI,IAAG,UAAKN,M,QCRDO,EAAuB,SAAC,GAKH,IAJhCC,EAI+B,EAJ/BA,KACAC,EAG+B,EAH/BA,MACAC,EAE+B,EAF/BA,IAE+B,IAD/BC,cAC+B,MADtB,QACsB,EAC/B,OACE,sBAAM,cAAY,uBAAlB,SACGC,KAAKC,eAAeF,GAAQA,OAAO,IAAIG,KAAKN,EAAMC,EAAOC,OCb1DK,EAAmBtB,IAAOuB,MAAV,kEASTC,EAAqB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,UACnC,OACE,cAACH,EAAD,CAAkB,cAAY,gBAA9B,SACE,kCACE,+BACE,2CACA,6BAAKG,EAAUC,KAAKC,UAEtB,+BACE,qCACA,6BAAKF,EAAUG,SAEjB,+BACE,+CACA,6BACE,cAAC,EAAD,eACMH,EAAUI,mBAIpB,+BACE,4CACA,6BAAKJ,EAAUK,WAAa,gBCvBzBC,EAAgB,SAAC,GAAuC,IAArCN,EAAoC,EAApCA,UAC5B,OACI,eAACtB,EAAD,WACI,eAACJ,EAAD,CAASiC,MAAO,CAAEC,eAAgB,gBAAlC,UACI,cAAC,EAAD,CACIzB,kBAAmBiB,EAAUC,KAAKC,KAClClB,kBAAmBgB,EAAUS,MAAMC,QAEvC,cAAC,EAAD,CAAoBV,UAAWA,OAEnC,qBAAKO,MAAO,CAAEI,UAAW,QAASC,UAAW,UAAY,cAAY,uBAArE,SACI,cAAC,EAAD,CAAsBhC,YAAaoB,EAAUpB,oBCqBhDiC,EAA6BC,aArCf,SAAC,GAAiC,IAAxBC,EAAuB,cAA9BC,KAA8B,MAC1D,EAAoCC,IAAMC,SAAS,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAoCL,EAAWM,iBAAiBF,GAAhE,sBAASG,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,KAEnB,OAFA,EAAyBC,MAGhB,qBAAK,cAAY,eAAjB,oBAGLF,EACK,cAAC,EAAD,IAIP,sBAAKf,MAAO,CAAEkB,OAAQ,OAAQC,SAAU,QAASC,QAAS,QAA1D,UACE,cAAC,EAAD,CAAe3B,UAAWuB,EAAKvB,YAC/B,eAAC1B,EAAD,CAASiC,MAAO,CAAEC,eAAgB,gBAAiBmB,QAAS,iBAA5D,UACE,wBACEC,KAAK,SACL,cAAY,0BACZC,SAAyB,IAAfV,EACVW,QAAS,kBAAMV,GAAc,SAACW,GAAD,OAAkB,IAARA,EAAY,EAAIA,EAAM,MAJ/D,sBAQA,wBACEH,KAAK,SACL,cAAY,sBACZE,QAAS,kBAAMV,GAAc,SAACW,GAAD,OAASA,EAAM,MAH9C,0BAYoE,CAC1ElE,ICrCImE,EAAwB,CAC5B,CACEC,QAASpE,EACTqE,WAAY,SAACC,GACX,OAAO,IAAIrE,EAAkBqE,IAE/BnB,KAAM,CAACoB,OAWIC,sBAAaxB,EAA4BmB","file":"static/js/4.dea097d1.chunk.js","sourcesContent":["import { UseQueryResponse } from 'urql'\r\nimport { UrqlGraphQLService } from '../../../services/urql-graphql-client.service'\r\nimport { IAnimeCharacterAPI } from './anime-character-api.interface'\r\n\r\nvar animeCharacterInfoQuery = `\r\nquery ($id: Int) {\r\n  Character(id: $id){\r\n    description\r\n    age\r\n    dateOfBirth {\r\n      year\r\n      month\r\n      day\r\n    }\r\n    image {\r\n      large\r\n    }\r\n    name {\r\n      full\r\n    }\r\n    bloodType\r\n  }\r\n}\r\n`\r\n\r\nexport const ANIME_CHARACTER_API_TOKEN: string = 'APIService'\r\n\r\nexport class AnimeCharacterAPI implements IAnimeCharacterAPI {\r\n  constructor(private graphqlService: typeof UrqlGraphQLService) {}\r\n\r\n  public getCharacterInfo(characterId: number): UseQueryResponse<any, { id: number }> {\r\n    return this.graphqlService.useQuery({\r\n      query: animeCharacterInfoQuery,\r\n      variables: { id: characterId }\r\n    })\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const FlexRow = styled.div`\r\n  & {\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n`\r\n","import React from 'react';\r\n\r\nexport const IndeterminateLoader = () => {\r\n    return <div data-testid=\"indeterminateLoadingIndicator\">Loading...</div>\r\n}","import styled from 'styled-components'\r\n\r\nexport const Card = styled.div`\r\n  & {\r\n    margin: 8px;\r\n    padding: 32px;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 12px 1px rgba(0, 0, 0, 0.66);\r\n  }\r\n`\r\n","import React from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport type CharacterDescriptionProps = {\r\n  description: string\r\n}\r\n\r\nexport const CharacterDescription = ({\r\n  description\r\n}: CharacterDescriptionProps) => {\r\n  return (\r\n    <ReactMarkdown data-testid='characterDescription'>\r\n      {description}\r\n    </ReactMarkdown>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport type CharacterImageProps = {\r\n  fullCharacterName: string\r\n  characterImageURL: string\r\n}\r\n\r\nexport const CharacterImage = ({\r\n  fullCharacterName: characterName,\r\n  characterImageURL\r\n}: CharacterImageProps) => {\r\n  return (\r\n    <img\r\n      height=\"345px\"\r\n      width=\"245px\"\r\n      data-testid='characterImage'\r\n      src={characterImageURL}\r\n      alt={`${characterName}`}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport type CharacterDateOfBirthProps = {\r\n  year: number\r\n  month: number\r\n  day: number\r\n  format: string\r\n}\r\n\r\nexport const CharacterDateOfBirth = ({\r\n  year,\r\n  month,\r\n  day,\r\n  format = 'en-us'\r\n}: CharacterDateOfBirthProps) => {\r\n  return (\r\n    <span data-testid='characterDateOfBirth'>\r\n      {Intl.DateTimeFormat(format).format(new Date(year, month, day))}\r\n    </span>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { CharacterDateOfBirth } from './CharacterDateOfBirth'\r\n\r\nconst LeftAlignedTable = styled.table`\r\n  text-align: left;\r\n  width: 256px;\r\n`\r\n\r\nexport type CharacterInfoTableProps = {\r\n  Character: any\r\n}\r\n\r\nexport const CharacterInfoTable = ({ Character }: CharacterInfoTableProps) => {\r\n  return (\r\n    <LeftAlignedTable data-testid='characterInfo'>\r\n      <tbody>\r\n        <tr>\r\n          <th>Full Name</th>\r\n          <td>{Character.name.full}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Age</th>\r\n          <td>{Character.age}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Date Of Birth</th>\r\n          <td>\r\n            <CharacterDateOfBirth\r\n              {...Character.dateOfBirth}\r\n            ></CharacterDateOfBirth>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>Blood Type</th>\r\n          <td>{Character.bloodType || 'NA'}</td>\r\n        </tr>\r\n      </tbody>\r\n    </LeftAlignedTable>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Card } from \"../../../components/Card\"\r\nimport { FlexRow } from \"../../../components/FlexBox\"\r\nimport { CharacterDescription } from \"./CharacterDescription\"\r\nimport { CharacterImage } from \"./CharacterImage\"\r\nimport { CharacterInfoTable } from \"./CharacterInfoTable\"\r\n\r\n\r\nexport type CharacterCardProps = {\r\n    Character: any\r\n}\r\n\r\nexport const CharacterCard = ({ Character }: CharacterCardProps) => {\r\n    return (\r\n        <Card>\r\n            <FlexRow style={{ justifyContent: 'space-around' }}>\r\n                <CharacterImage\r\n                    fullCharacterName={Character.name.full}\r\n                    characterImageURL={Character.image.large}\r\n                />\r\n                <CharacterInfoTable Character={Character} />\r\n            </FlexRow>\r\n            <div style={{ maxHeight: '300px', overflowY: 'scroll' }} data-testid=\"characterDescription\">\r\n                <CharacterDescription description={Character.description} />\r\n            </div>\r\n        </Card>\r\n\r\n    )\r\n}","import { withProviders } from '@doughtnerd/wrangler-di'\r\nimport React from 'react'\r\nimport { FlexRow } from '../../components/FlexBox'\r\nimport { IndeterminateLoader } from '../../components/IndeterminateLoader'\r\nimport { CharacterCard } from './components/CharacterCard'\r\nimport { ANIME_CHARACTER_API_TOKEN } from './services/anime-character-api.service'\r\n\r\nconst AnimeCharacterPage = ({ deps: [apiService] }: any) => {\r\n  const [pageNumber, setPageNumber] = React.useState(1)\r\n\r\n  const [{ fetching, data, error }] = apiService.getCharacterInfo(pageNumber)\r\n\r\n  if (error) {\r\n    return <div data-testid=\"errorMessage\">Error!</div>\r\n  }\r\n\r\n  if (fetching) {\r\n    return <IndeterminateLoader />\r\n  }\r\n\r\n  return (\r\n    <div style={{ margin: 'auto', maxWidth: '800px', padding: '64px' }}>\r\n      <CharacterCard Character={data.Character} />\r\n      <FlexRow style={{ justifyContent: 'space-between', padding: '0 16px 0 16px' }}>\r\n        <button\r\n          type='button'\r\n          data-testid='previousCharacterButton'\r\n          disabled={pageNumber === 1}\r\n          onClick={() => setPageNumber((val) => (val === 1 ? 1 : val - 1))}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          type='button'\r\n          data-testid='nextCharacterButton'\r\n          onClick={() => setPageNumber((val) => val + 1)}\r\n        >\r\n          Next\r\n        </button>\r\n      </FlexRow>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const AnimeCharacterPageWithDeps = withProviders(AnimeCharacterPage, [\r\n  ANIME_CHARACTER_API_TOKEN\r\n])\r\n","import { Provider, withInjector } from '@doughtnerd/wrangler-di'\r\nimport { GRAPHQL_API, UrqlGraphQLService } from '../../services/urql-graphql-client.service'\r\nimport {\r\n  AnimeCharacterAPI,\r\n  ANIME_CHARACTER_API_TOKEN\r\n} from './services/anime-character-api.service'\r\nimport { AnimeCharacterPageWithDeps } from './AnimeCharacterPage'\r\n\r\nconst providers: Provider[] = [\r\n  {\r\n    provide: ANIME_CHARACTER_API_TOKEN,\r\n    useFactory: (gqlService: typeof UrqlGraphQLService) => {\r\n      return new AnimeCharacterAPI(gqlService)\r\n    },\r\n    deps: [GRAPHQL_API]\r\n  }\r\n]\r\n\r\n/**\r\n * Personal opinion is this file doesn't need testing for two reasons:\r\n * 1. We assume the library itself has appropriately handled it's testing (perhaps a dangerous assumption but it does simplify testing needs)\r\n * 2. We make sure to fully test AnimeCharacterPageWithDeps and each provider\r\n *\r\n * With each portion of the code used here independently tested, testing this file is redundant/not valuable\r\n * */\r\nexport default withInjector(AnimeCharacterPageWithDeps, providers)\r\n"],"sourceRoot":""}