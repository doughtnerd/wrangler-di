{"version":3,"sources":["services/urql-graphql-client.service.ts","../../src/Injector.ts","../../src/index.tsx","App.tsx","index.tsx"],"names":["GRAPHQL_API","UrqlGraphQLService","useQuery","useMutation","Injector","dependencies","parentInjector","dependencyGraph","this","registerProvider","providerToken","dependency","configs","markDependencies","dep","token","deps","e","parentDep","Error","instance","getConstructorFunc","Object","constructorFunc","getNodeData","resolveDependencies","providerConfig","inject","service","InjectorContext","injector","InjectorContextProvider","providers","children","React","value","withProviders","component","Component","providerList","compDeps","InjectorContextConsumer","withInjector","client","createClient","url","AnimeListPage","lazy","AnimeCharacterPage","appProviders","provide","useValue","App","Suspense","fallback","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a2bcffb.chunk.js","sourcesContent":["import { useMutation, useQuery } from 'urql'\r\n\r\nexport const GRAPHQL_API = 'GraphQLService'\r\n\r\nexport const UrqlGraphQLService = {\r\n  useQuery,\r\n  useMutation\r\n}\r\n","/* eslint-disable new-cap */\r\nimport { DepGraph, DepGraphCycleError } from 'dependency-graph'\r\nimport {\r\n  ConstructorProvider,\r\n  InjectionToken,\r\n  Provider,\r\n  ProviderConfigs\r\n} from './provider.type'\r\n\r\nexport class Injector {\r\n  private dependencyGraph = new DepGraph<any>()\r\n\r\n  constructor(\r\n    dependencies: Provider[] = [],\r\n    private parentInjector: Injector | null = null\r\n  ) {\r\n    dependencies.forEach((dep: any) => this.registerProvider(dep))\r\n    this.resolveDependencies()\r\n  }\r\n\r\n  private registerProvider(dependency: Provider): void {\r\n    const { provide: providerToken, ...configs } = dependency\r\n    this.dependencyGraph.addNode(providerToken, configs)\r\n  }\r\n\r\n  private markDependencies(): void {\r\n    this.dependencyGraph\r\n      .overallOrder()\r\n      .map((dep) => [dep, this.dependencyGraph.getNodeData(dep)])\r\n      .forEach(([token, configs]) => {\r\n        const deps = (configs as any).deps ? (configs as any).deps : []\r\n\r\n        deps.forEach((dep: string) => {\r\n          try {\r\n            this.dependencyGraph.addDependency(token, dep)\r\n          } catch (e) {\r\n            if (e instanceof DepGraphCycleError) {\r\n              throw e\r\n            }\r\n            if ((e as Error).message.includes('Node does not exist')) {\r\n              let parentInjector = this.parentInjector\r\n              let parentDep\r\n              while (parentInjector) {\r\n                try {\r\n                  parentDep = parentInjector.inject(dep)\r\n                  break\r\n                } catch (e) {\r\n                  parentInjector = parentInjector.parentInjector\r\n                }\r\n              }\r\n\r\n              if (parentDep) {\r\n                this.dependencyGraph.addNode(dep, { instance: parentDep })\r\n                this.dependencyGraph.addDependency(token, dep)\r\n              } else {\r\n                throw new Error(\r\n                  `Could not resolve dependency: ${dep} for Injectable: ${token}`\r\n                )\r\n              }\r\n            }\r\n          }\r\n        })\r\n      })\r\n  }\r\n\r\n  private getConstructorFunc(\r\n    providerToken: string,\r\n    providerConfig: ProviderConfigs\r\n  ): Function {\r\n    let constructorFunc\r\n    if (Object.prototype.hasOwnProperty.call(providerConfig, 'useClass')) {\r\n      constructorFunc = (...deps: any) => {\r\n        return new (\r\n          this.dependencyGraph.getNodeData(providerToken) as ConstructorProvider\r\n        ).useClass({ deps })\r\n      }\r\n    }\r\n\r\n    if (Object.prototype.hasOwnProperty.call(providerConfig, 'useFactory')) {\r\n      constructorFunc =\r\n        this.dependencyGraph.getNodeData(providerToken).useFactory\r\n    }\r\n\r\n    if (Object.prototype.hasOwnProperty.call(providerConfig, 'useValue')) {\r\n      constructorFunc = () =>\r\n        this.dependencyGraph.getNodeData(providerToken).useValue\r\n    }\r\n\r\n    return constructorFunc\r\n  }\r\n\r\n  private resolveDependencies(): void {\r\n    this.markDependencies()\r\n\r\n    this.dependencyGraph.overallOrder().forEach((providerToken: string) => {\r\n      const providerConfig = this.dependencyGraph.getNodeData(providerToken)\r\n\r\n      const constructorFunc = this.getConstructorFunc(\r\n        providerToken,\r\n        providerConfig\r\n      )\r\n\r\n      let deps = (providerConfig as any).deps\r\n        ? (providerConfig as any).deps\r\n        : []\r\n      deps = deps.map(\r\n        (dep: string) => this.dependencyGraph.getNodeData(dep).instance\r\n      )\r\n\r\n      if (providerConfig?.instance == null) {\r\n        const instance = constructorFunc(...deps)\r\n\r\n        this.dependencyGraph.setNodeData(providerToken, {\r\n          ...providerConfig,\r\n          instance\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  public inject(service: InjectionToken) {\r\n    const dep = this.dependencyGraph.getNodeData(service).instance\r\n\r\n    if (!dep) {\r\n      throw new Error(`Could not find provider :${service}`)\r\n    }\r\n\r\n    return dep\r\n  }\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { Injector } from './Injector'\r\nimport { Provider } from './provider.type'\r\n\r\ntype InjectorContextType = {\r\n  injector: Injector\r\n}\r\n\r\nconst InjectorContext = React.createContext<InjectorContextType>({\r\n  injector: new Injector()\r\n})\r\n\r\nexport type InjectorContextProviderProps = {\r\n  providers: Provider[]\r\n  children: React.ReactElement<any>\r\n}\r\n\r\nexport const InjectorContextProvider = ({\r\n  providers,\r\n  children\r\n}: InjectorContextProviderProps) => {\r\n  const parentInjector = React.useContext(InjectorContext)\r\n  return (\r\n    <InjectorContext.Provider\r\n      value={{ injector: new Injector(providers, parentInjector.injector) }}\r\n    >\r\n      {children}\r\n    </InjectorContext.Provider>\r\n  )\r\n}\r\n\r\nconst InjectorContextConsumer = ({\r\n  component: Component,\r\n  providerList\r\n}: any) => {\r\n  const { injector } = React.useContext(InjectorContext)\r\n  const [compDeps] = React.useState(() =>\r\n    providerList.map((dep: any) => {\r\n      return injector.inject(dep)\r\n    })\r\n  )\r\n\r\n  return React.cloneElement(Component, {\r\n    ...Component.props,\r\n    deps: compDeps\r\n  } as any)\r\n}\r\n\r\nexport const withProviders = (component: any, providerList: string[]): any => {\r\n  return React.memo(() => InjectorContextConsumer({ component, providerList }))\r\n}\r\n\r\nexport const withInjector = (component: any, providers: Provider[]) => {\r\n  return React.memo(() => {\r\n    return (\r\n      <InjectorContextProvider providers={providers}>\r\n        {component}\r\n      </InjectorContextProvider>\r\n    )\r\n  })\r\n}\r\n\r\nexport function useInjector() {\r\n  const { injector } = React.useContext(InjectorContext)\r\n\r\n  return { injector }\r\n}\r\n\r\nexport function useProviders(providerList: string[]) {\r\n  const { injector } = React.useContext(InjectorContext)\r\n\r\n  const [providers, setProviders] = React.useState<Provider[]>([])\r\n\r\n  useEffect(() => {\r\n    setProviders(providerList.map((provider) => injector.inject(provider)))\r\n  }, providerList)\r\n\r\n  return providers\r\n}\r\n\r\nexport type { Provider } from './provider.type'\r\n","import React from 'react'\r\nimport { InjectorContextProvider, Provider } from '@doughtnerd/wrangler-di'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport { createClient, Provider as UrqlProvider } from 'urql'\r\nimport {\r\n  GRAPHQL_API,\r\n  UrqlGraphQLService\r\n} from './services/urql-graphql-client.service'\r\n\r\nconst client = createClient({\r\n  url: 'https://graphql.anilist.co'\r\n})\r\n\r\nconst AnimeListPage = React.lazy(\r\n  () => import('./pages/AnimeListPage/AnimeListPage')\r\n)\r\n\r\nconst AnimeCharacterPage = React.lazy(\r\n  () => import('./pages/AnimeCharacterPage')\r\n)\r\n\r\nconst appProviders: Provider[] = [\r\n  { provide: GRAPHQL_API, useValue: UrqlGraphQLService }\r\n]\r\n\r\nconst App = () => {\r\n  return (\r\n    <UrqlProvider value={client}>\r\n      <InjectorContextProvider providers={appProviders}>\r\n        <React.Suspense fallback={<div>Loading...</div>}>\r\n          <Router>\r\n            <Switch>\r\n              <Route path='/anime-details' component={AnimeListPage}></Route>\r\n              <Route\r\n                path='/anime-character-details'\r\n                component={AnimeCharacterPage}\r\n              ></Route>\r\n            </Switch>\r\n          </Router>\r\n        </React.Suspense>\r\n      </InjectorContextProvider>\r\n    </UrqlProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}